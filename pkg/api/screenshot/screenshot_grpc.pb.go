// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: api/screenshot/screenshot.proto

package screenshot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScreenshotClient is the client API for Screenshot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScreenshotClient interface {
	// Get site image
	Image(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error)
}

type screenshotClient struct {
	cc grpc.ClientConnInterface
}

func NewScreenshotClient(cc grpc.ClientConnInterface) ScreenshotClient {
	return &screenshotClient{cc}
}

func (c *screenshotClient) Image(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error) {
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, "/screenshot.Screenshot/Image", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScreenshotServer is the server API for Screenshot service.
// All implementations must embed UnimplementedScreenshotServer
// for forward compatibility
type ScreenshotServer interface {
	// Get site image
	Image(context.Context, *ImageRequest) (*ImageResponse, error)
	mustEmbedUnimplementedScreenshotServer()
}

// UnimplementedScreenshotServer must be embedded to have forward compatible implementations.
type UnimplementedScreenshotServer struct {
}

func (UnimplementedScreenshotServer) Image(context.Context, *ImageRequest) (*ImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Image not implemented")
}
func (UnimplementedScreenshotServer) mustEmbedUnimplementedScreenshotServer() {}

// UnsafeScreenshotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScreenshotServer will
// result in compilation errors.
type UnsafeScreenshotServer interface {
	mustEmbedUnimplementedScreenshotServer()
}

func RegisterScreenshotServer(s grpc.ServiceRegistrar, srv ScreenshotServer) {
	s.RegisterService(&Screenshot_ServiceDesc, srv)
}

func _Screenshot_Image_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreenshotServer).Image(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/screenshot.Screenshot/Image",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreenshotServer).Image(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Screenshot_ServiceDesc is the grpc.ServiceDesc for Screenshot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Screenshot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "screenshot.Screenshot",
	HandlerType: (*ScreenshotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Image",
			Handler:    _Screenshot_Image_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/screenshot/screenshot.proto",
}
